---
alwaysApply: true
---
# üõ†Ô∏è Protocolo y Pol√≠ticas de Trabajo con Git para Equipos de Desarrollo

## 1. üå± Estrategia de Ramas (Branching Strategy)

### 1.1. Estructura de Ramas Principal

Se recomienda adoptar una variante del Gitflow con las siguientes ramas permanentes:

- main/master: Contiene √∫nicamente el c√≥digo estable y listo para producci√≥n. Est√° protegida contra pushes directos.
- develop: Rama de integraci√≥n donde se unen las funcionalidades completadas para preparar el siguiente release. Tambi√©n est√° protegida contra pushes directos.

### 1.2. Ramas de Desarrollo (Feature Branches)

- Nomenclatura: Utilizar feature/descripcion-breve, fix/issue-123, o hotfix/urgencia-corta.
- Caracter√≠sticas: Deben ser ramas de corta duraci√≥n (idealmente menos de un d√≠a) para minimizar conflictos de fusi√≥n.
- Creaci√≥n desde develop: `git checkout -b feature/nueva-funcionalidad develop`

## 2. üíª Flujo de Trabajo Diario

### 2.1. Comenzar a Trabajar

- Sincronizar: Siempre comenzar actualizando la rama develop local:

    ```bash
    git checkout develop
    git pull origin develop
    ```

  Esto evita conflictos al garantizar que trabajas con la versi√≥n m√°s reciente del c√≥digo.
- Crear rama de feature: `git checkout -b feature/nombre-feature`

### 2.2. Trabajar en Cambios

- Verificar estado frecuentemente: Usar `git status` para monitorear cambios realizados, archivos modificados y la rama actual.

- Realizar commits at√≥micos y significativos:
  - Frecuencia: Realiza commits con frecuencia, cada uno representando una unidad l√≥gica de cambio.
  - Mensajes claros: Usar el formato convencional:

    ```text
    <tipo>(<alcance>): <asunto>

    <cuerpo>

    <pie>
    ```

    Ejemplo:

    ```text
    text
    feat(payment): integrate with Stripe API

    - Add Stripe SDK dependency
    - Create payment intent service
    - Handle webhook for payment confirmation

    Refs: #123
    ```

- Plantilla de commit: Considerar configurar commit.template para estandarizar mensajes.

### 2.3. Finalizar una Funcionalidad

1. Subir la rama al repositorio remoto: git push origin feature/nombre-feature
2. Crear un Pull Request (PR) o Merge Request (MR) hacia develop.
3. Esperar la revisi√≥n de c√≥digo por al menos un compa√±ero.
4. Realizar los ajustes solicitados en la revisi√≥n.
5. El revisor aprueba y fusiona el PR/MR. La rama de feature se elimina tras la fusi√≥n.

## 3. ‚úÖ Est√°ndares de Calidad de C√≥digo

### 3.1. Revisiones de C√≥digo (Code Review)

- Requisito obligatorio: Todo c√≥digo debe ser revisado antes de integrarse en develop.
- Objetivo: Mantener la calidad, compartir conocimiento y detectar problemas potenciales.
- Responsabilidad: El revisor es tan responsable como el autor de la calidad del c√≥digo integrado.

### 3.2. Integraci√≥n Continua (CI)

- Build autom√°tico: Cada PR/MR debe disparar un pipeline de CI que ejecute al menos:
- Linting y an√°lisis est√°tico de c√≥digo.
- Suite de pruebas unitarias.
- Verificaci√≥n de vulnerabilidades de seguridad conocidas.
- Criterio de fusi√≥n: El pipeline debe pasar exitosamente antes de permitir la fusi√≥n.
- Prioridad: Si la compilaci√≥n se rompe o las pruebas fallan, el equipo debe priorizar solucionar el problema lo antes posible.

## 4. üö® Prevenci√≥n y Manejo de Conflictos

- Cambios peque√±os y frecuentes: Realizar cambios incrementales reduce dr√°sticamente el riesgo de conflictos de fusi√≥n.
- Actualizar frecuentemente: Si trabajas en una rama larga, fusiona (merge) los cambios de develop a tu rama regularmente para mantenerla actualizada.
- Antes de fusionar: Siempre ejecuta git pull origin develop en tu rama de feature para resolver conflictos localmente antes de crear el PR/MR.

## 5. üìã Lista de Verificaci√≥n (Checklist) para Pull Requests

- Cada PR/MR debe cumplir con lo siguiente antes de su fusi√≥n:
- C√≥digo compila sin errores.
- Tests automatizados pasan correctamente.
- Cobertura de c√≥digo se mantiene o mejora.
- Cumple con gu√≠as de estilo del proyecto (linter).
- Documentaci√≥n actualizada (si aplica).
- Revisado y aprobado por al menos un compa√±ero.
- Conflictos de fusi√≥n resueltos (si existen).
- La rama est√° actualizada con develop.

## 6. üóÇÔ∏è Manejo del Repositorio

- No incluir archivos binarios o generados: Evitar commits de archivos compilados, dependencias (node_modules, .jar) o archivos espec√≠ficos del IDE. Utilizar .gitignore robusto.
- Commits limpios: Antes de hacer commit, revisar qu√© se est√° incluyendo con `git diff --staged`.
- Seguridad: Agregar un archivo SECURITY.md en la ra√≠z del repositorio para proporcionar instrucciones sobre c√≥mo reportar vulnerabilidades de seguridad.

## 7. üîÄ Pol√≠tica de Pull Requests

### 7.1. Principios Fundamentales

- Principio de Responsabilidad √önica: Cada Pull Request debe tener un √∫nico prop√≥sito espec√≠fico. Evita incluir correcciones de typos no relacionados o peque√±as soluciones de bugs en PRs de caracter√≠sticas nuevas.

- Tama√±o Reducido: Las PRs peque√±as y enfocadas son m√°s f√°ciles y r√°pidas de revisar, dejan menos espacio para introducir bugs y proporcionan un historial m√°s claro de cambios. Idealmente, mant√©n las PRs en menos de 200-400 l√≠neas de c√≥digo.

- Contexto Completo: Proporciona descripciones detalladas que incluyan el prop√≥sito del PR, resumen de cambios y enlaces a issues relacionados.

### 7.2. Creaci√≥n de Pull Requests

#### 7.2.1. Plantilla Est√°ndar para Pull Requests

```markdown

## Descripci√≥n

[Descripci√≥n clara del prop√≥sito de estos cambios]

## Cambios Realizados

- [Lista de cambios principales]
- [Agrupar por conceptos o problemas resueltos]

## Tipo de Cambio

- [ ] Correcci√≥n de bug
- [ ] Nueva caracter√≠stica
- [ ] Cambio breaking
- [ ] Refactorizaci√≥n
- [ ] Documentaci√≥n

## Comprobaciones

- [ ] He auto-revisado mi PR
- [ ] El c√≥digo compila/pasa tests
- [ ] He a√±adido tests si corresponde
- [ ] He actualizado la documentaci√≥n

## Capturas (si aplica)

[A√±adir capturas de pantalla para cambios de frontend]

## Issues Relacionados

Closes #[n√∫mero], Fixes #[n√∫mero]
```

#### 7.2.2. Pr√°cticas Espec√≠ficas

- T√≠tulos Descriptivos: Usa t√≠tulos claros que describan lo que hace el PR, no solo la clave del issue.
- Revisi√≥n Propia: Revisa, compila y prueba tu propio PR antes de enviarlo.
- PRs en Draft: Usa PRs en borrador para obtener feedback temprano antes de completar todos los cambios.
- Comentarios Gu√≠a: A√±ade comentarios en l√≠neas espec√≠ficas para dirigir la atenci√≥n del revisor a partes importantes.

### 7.3. Proceso de Revisi√≥n

#### 7.3.1. Para el Autor

- S√© Proactivo: Considera organizar una reuni√≥n breve para PRs largos y explica los cambios.
- Actitud Constructiva: Mant√©n un tono profesional en los comentarios. Los comentarios se centran en el c√≥digo, no en las personas.
- Retroalimentaci√≥n: Si cambias algo importante despu√©s de la aprobaci√≥n, notifica a los revisores anteriores para que revisen nuevamente.

#### 7.3.2. Para el Revisor

- Revisi√≥n R√°pida: Responde a las solicitudes de review en un plazo m√°ximo de un d√≠a h√°bil.
- Feedback Espec√≠fico: Evita comentarios vagos. Proporciona alternativas concretas cuando no est√©s de acuerdo.
- Revisi√≥n Multidisciplinaria: Incluye expertos en diferentes √°reas seg√∫n el tipo de cambios (UX para frontend, seguridad para cambios cr√≠ticos, etc.).

### 7.4. Automatizaci√≥n y QA

- Integraci√≥n Continua: Configura pipelines autom√°ticos que ejecuten tests y an√°lisis est√°tico en cada PR.
- An√°lisis Est√°tico: Usa herramientas de linting para mantener la coherencia del estilo de c√≥digo.
- Revisi√≥n de Seguridad: Incluye verificaciones de seguridad automatizadas para detectar dependencias vulnerables.

## 8. üìÑ Generaci√≥n y Gesti√≥n de Changelogs

### 8.1. ¬øQu√© es un Changelog?

Un changelog es un archivo que contiene una lista cronol√≥gica de todos los cambios notables realizados en un proyecto, organizado normalmente por versi√≥n con la fecha, seguido de una lista de caracter√≠sticas a√±adidas, mejoradas y eliminadas.

### 8.2. Enfoques para Generar Changelogs

#### 8.2.1. Enfoque Manual (Recomendado)

Mant√©n un archivo `CHANGELOG.md` siguiendo el formato de Keep a Changelog:

```markdown

# Changelog

Todos los cambios notables en este proyecto ser√°n documentados en este archivo.

El formato est√° basado en [Keep a Changelog](https://keepachangelog.com/es-ES/1.1.0/),
y este proyecto adhiere a [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [No Liberado]

### A√±adido

-

### Cambiado

-

### Corregido

-

### Eliminado

-

## [1.1.1] - 2023-03-05

### A√±adido

- Traducci√≥n al √°rabe (#444)
- v1.1 traducci√≥n al franc√©s
```

#### 8.2.2. Enfoque Automatizado

- M√©todo Simple (para proyectos peque√±os):

    ```bash

    # Generar changelog b√°sico desde commits

    git log --pretty="- %s" > CHANGELOG.md

    # Con formato mejorado

    git log --pretty="- %s (%an, %ad)" --date=short > CHANGELOG.md
    ```

- Herramientas Especializadas:

| Herramienta        | Lenguaje | Caracter√≠sticas                                    |
| ------------------ | -------- | -------------------------------------------------- |
| git-cliff          | Rust     | Altamente personalizable, commits convencionales   |
| generate-changelog | Node.js  | Formato espec√≠fico, requiere estructura de commits |
| git-changelog      | Python   | Plantillas Jinja2, m√∫ltiples convenciones          |

### 8.3. Convenci√≥n de Commits para Changelogs Automatizados

Para aprovechar las herramientas automatizadas, implementa una convenci√≥n de commits:

```text
<tipo>(<√°mbito>): <descripci√≥n> [flags]

Ejemplos:
feat(auth): add OAuth2 integration
fix(api): resolve memory leak in request handler
docs(readme): update installation instructions
breaking(db): remove deprecated methods
```

Los tipos com√∫nmente aceptados incluyen: feat, fix, docs, style, refactor, test, chore.

### 8.4. Flujo de Trabajo Integrado

- Pre-commit: Los desarrolladores siguen la convenci√≥n establecida
- Pre-release: Ejecutar herramienta de generaci√≥n de changelog
- Revisi√≥n: Revisar y ajustar el changelog generado autom√°ticamente
- Commit: Incluir changelog actualizado en el tag de release

## 9. ü§ù Integraci√≥n con CI/CD y Protocolo de Equipo

### 9.1 Configuraci√≥n para GitHub Actions

```yaml
name: CI
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v1
      - run: uv sync --frozen
      - run: uv run pytest
      
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v1
      - run: uv sync --frozen
      - run: uv run ruff check . --fix
      - run: uv run flake8 .
```
