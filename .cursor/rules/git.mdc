---
alwaysApply: true
---
# üõ†Ô∏è Protocolo y Pol√≠ticas de Trabajo con Git para Equipos de Desarrollo

## 1. üå± Estrategia de Ramas (Branching Strategy)

### 1.1. Estructura de Ramas Principal

Se recomienda adoptar una variante del Gitflow con las siguientes ramas permanentes:

- main/master: Contiene √∫nicamente el c√≥digo estable y listo para producci√≥n. Est√° protegida contra pushes directos.
- develop: Rama de integraci√≥n donde se unen las funcionalidades completadas para preparar el siguiente release. Tambi√©n est√° protegida contra pushes directos.

### 1.2. Ramas de Desarrollo (Feature Branches)

- Nomenclatura: Utilizar feature/descripcion-breve, fix/issue-123, o hotfix/urgencia-corta.
- Caracter√≠sticas: Deben ser ramas de corta duraci√≥n (idealmente menos de un d√≠a) para minimizar conflictos de fusi√≥n.
- Creaci√≥n desde develop: `git checkout -b feature/nueva-funcionalidad develop`

## 2. üíª Flujo de Trabajo Diario

### 2.1. Comenzar a Trabajar

- Sincronizar: Siempre comenzar actualizando la rama develop local:

    ```bash
    git checkout develop
    git pull origin develop
    ```

  Esto evita conflictos al garantizar que trabajas con la versi√≥n m√°s reciente del c√≥digo.
- Crear rama de feature: `git checkout -b feature/nombre-feature`

### 2.2. Trabajar en Cambios

- Verificar estado frecuentemente: Usar `git status` para monitorear cambios realizados, archivos modificados y la rama actual.

- Realizar commits at√≥micos y significativos:
  - Frecuencia: Realiza commits con frecuencia, cada uno representando una unidad l√≥gica de cambio.
  - Mensajes claros: Usar el formato convencional:

    ```text
    <tipo>(<alcance>): <asunto>

    <cuerpo>

    <pie>
    ```

    Ejemplo:

    ```text
    text
    feat(payment): integrate with Stripe API

    - Add Stripe SDK dependency
    - Create payment intent service
    - Handle webhook for payment confirmation

    Refs: #123
    ```

- Plantilla de commit: Considerar configurar commit.template para estandarizar mensajes.

### 2.3. Finalizar una Funcionalidad

1. Subir la rama al repositorio remoto: git push origin feature/nombre-feature
2. Crear un Pull Request (PR) o Merge Request (MR) hacia develop.
3. Esperar la revisi√≥n de c√≥digo por al menos un compa√±ero.
4. Realizar los ajustes solicitados en la revisi√≥n.
5. El revisor aprueba y fusiona el PR/MR. La rama de feature se elimina tras la fusi√≥n.

## 3. ‚úÖ Est√°ndares de Calidad de C√≥digo

### 3.1. Revisiones de C√≥digo (Code Review)

- Requisito obligatorio: Todo c√≥digo debe ser revisado antes de integrarse en develop.
- Objetivo: Mantener la calidad, compartir conocimiento y detectar problemas potenciales.
- Responsabilidad: El revisor es tan responsable como el autor de la calidad del c√≥digo integrado.

### 3.2. Integraci√≥n Continua (CI)

- Build autom√°tico: Cada PR/MR debe disparar un pipeline de CI que ejecute al menos:
- Linting y an√°lisis est√°tico de c√≥digo.
- Suite de pruebas unitarias.
- Verificaci√≥n de vulnerabilidades de seguridad conocidas.
- Criterio de fusi√≥n: El pipeline debe pasar exitosamente antes de permitir la fusi√≥n.
- Prioridad: Si la compilaci√≥n se rompe o las pruebas fallan, el equipo debe priorizar solucionar el problema lo antes posible.

## 4. üö® Prevenci√≥n y Manejo de Conflictos

- Cambios peque√±os y frecuentes: Realizar cambios incrementales reduce dr√°sticamente el riesgo de conflictos de fusi√≥n.
- Actualizar frecuentemente: Si trabajas en una rama larga, fusiona (merge) los cambios de develop a tu rama regularmente para mantenerla actualizada.
- Antes de fusionar: Siempre ejecuta git pull origin develop en tu rama de feature para resolver conflictos localmente antes de crear el PR/MR.

## 5. üìã Lista de Verificaci√≥n (Checklist) para Pull Requests

- Cada PR/MR debe cumplir con lo siguiente antes de su fusi√≥n:
- C√≥digo compila sin errores.
- Tests automatizados pasan correctamente.
- Cobertura de c√≥digo se mantiene o mejora.
- Cumple con gu√≠as de estilo del proyecto (linter).
- Documentaci√≥n actualizada (si aplica).
- Revisado y aprobado por al menos un compa√±ero.
- Conflictos de fusi√≥n resueltos (si existen).
- La rama est√° actualizada con develop.

## 6. üóÇÔ∏è Manejo del Repositorio

- No incluir archivos binarios o generados: Evitar commits de archivos compilados, dependencias (node_modules, .jar) o archivos espec√≠ficos del IDE. Utilizar .gitignore robusto.
- Commits limpios: Antes de hacer commit, revisar qu√© se est√° incluyendo con `git diff --staged`.
- Seguridad: Agregar un archivo SECURITY.md en la ra√≠z del repositorio para proporcionar instrucciones sobre c√≥mo reportar vulnerabilidades de seguridad.
